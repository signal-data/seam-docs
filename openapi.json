{
  "openapi": "3.1.0",
  "info": {
    "title": "Seam AI Enrichment",
    "description": "API for enriching customer data with Generative AI & traditional third party providers.",
    "version": "0.1.0-beta.1"
  },
  "paths": {
    "/v1/chat/completions": {
      "post": {
        "tags": ["Completions"],
        "summary": "Completions Request",
        "description": "Text completion endpoint. Returns tokens as they are generated by the model.",
        "operationId": "completions_request_v1_chat_completions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              },
              "examples": {
                "completions": {
                  "summary": "Completions Request",
                  "value": {
                    "model": "researcher",
                    "messages": [
                      {
                        "role": "user",
                        "content": "What industry vertical does Seam AI operate in based on their website domain?"
                      }
                    ],
                    "stream": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompletionResponse" },
                "examples": {
                  "completions": {
                    "value": {
                      "id": "24962ed7-5865-489e-b290-3ff8b62ee916",
                      "model": "researcher",
                      "created": 1739564194,
                      "citations": ["https://www.getseam.ai/"],
                      "choices": [
                        {
                          "index": 0,
                          "finish_reason": "stop",
                          "message": {
                            "role": "system",
                            "content": "Seam AI operates in the Sales and Marketing industry vertical, with a specific focus on Sales Enablement and Go-to-Market (GTM) strategy, as indicated by their website domain, getseam.ai."
                          }
                        }
                      ],
                      "object": "chat.completion"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "ChatCompletionContentPartTextParam": {
        "properties": {
          "text": { "type": "string", "title": "Text" },
          "type": { "type": "string", "const": "text", "title": "Type" }
        },
        "type": "object",
        "required": ["text", "type"],
        "title": "ChatCompletionContentPartTextParam"
      },
      "ChatCompletionDeveloperMessageParam": {
        "properties": {
          "content": {
            "anyOf": [
              { "type": "string" },
              {
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
                },
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "role": { "type": "string", "const": "developer", "title": "Role" },
          "name": { "type": "string", "title": "Name" }
        },
        "type": "object",
        "required": ["content", "role"],
        "title": "ChatCompletionDeveloperMessageParam"
      },
      "ChatCompletionRequest": {
        "properties": {
          "temperature": {
            "anyOf": [
              { "type": "number", "maximum": 2.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Temperature",
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
            "default": 1.0
          },
          "top_p": {
            "anyOf": [
              { "type": "number", "maximum": 1.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Top P",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.",
            "default": 1.0
          },
          "stop": {
            "anyOf": [
              { "type": "string" },
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Stop",
            "description": "Up to 4 sequences where the API will stop generating further tokens."
          },
          "max_tokens": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Max Tokens",
            "description": "The maximum number of tokens to generate.",
            "deprecated": true
          },
          "max_completion_tokens": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Max Completion Tokens",
            "description": "An upper bound for the number of tokens that can be generated for a completion."
          },
          "presence_penalty": {
            "anyOf": [
              { "type": "number", "maximum": 2.0, "minimum": -2.0 },
              { "type": "null" }
            ],
            "title": "Presence Penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
            "default": 0.0
          },
          "frequency_penalty": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Frequency Penalty",
            "description": "A number between -2.0 and 2.0 where a positive value decreases the likelihood of repeating tokens that have already been mentioned.",
            "default": 0.0
          },
          "logit_bias": {
            "anyOf": [
              {
                "additionalProperties": { "type": "number" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Logit Bias",
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token."
          },
          "logprobs": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Logprobs",
            "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.",
            "default": false
          },
          "model": {
            "type": "string",
            "const": "researcher",
            "title": "Model",
            "default": "researcher"
          },
          "messages": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ChatCompletionUserMessageParam"
                },
                {
                  "$ref": "#/components/schemas/ChatCompletionSystemMessageParam"
                },
                {
                  "$ref": "#/components/schemas/ChatCompletionDeveloperMessageParam"
                }
              ]
            },
            "type": "array",
            "title": "Messages"
          },
          "response_format": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseFormatJSONSchema" },
              { "$ref": "#/components/schemas/ResponseFormatText" },
              { "type": "null" }
            ],
            "title": "Response Format",
            "description": "We currently support one type of structured output: JSON Schema. To use this feature, provide a JSON Schema as the `response_format` parameter in this format: `{'type': 'json_schema', 'json_schema': {'schema': object}}` where object is the valid JSON Schema. Extra keys provided to the object mapped by 'json_schema' will be ignored.\nExcluding this parameter, passing a null value, or passing `{'type': 'text'}` will return the completion as a string. This is the default behavior."
          },
          "stream": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Stream",
            "description": "If true, stream tokens as Server-Sent Events as the model generates them instead of waiting for the full model response. The stream terminates with data: [DONE]. If false, return a single JSON object containing the results.",
            "default": false
          }
        },
        "type": "object",
        "required": ["messages"],
        "title": "ChatCompletionRequest",
        "description": "Model for /v1/chat/completions request body."
      },
      "ChatCompletionSystemMessageParam": {
        "properties": {
          "content": {
            "anyOf": [
              { "type": "string" },
              {
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
                },
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "role": { "type": "string", "const": "system", "title": "Role" },
          "name": { "type": "string", "title": "Name" }
        },
        "type": "object",
        "required": ["content", "role"],
        "title": "ChatCompletionSystemMessageParam"
      },
      "ChatCompletionUserMessageParam": {
        "properties": {
          "content": {
            "anyOf": [
              { "type": "string" },
              {
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
                },
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "role": { "type": "string", "const": "user", "title": "Role" },
          "name": { "type": "string", "title": "Name" }
        },
        "type": "object",
        "required": ["content", "role"],
        "title": "ChatCompletionUserMessageParam"
      },
      "Choices": {
        "properties": {
          "index": { "type": "integer", "title": "Index" },
          "finish_reason": { "type": "string", "title": "Finish Reason" },
          "message": { "$ref": "#/components/schemas/MessageChunk" }
        },
        "type": "object",
        "required": ["index", "finish_reason", "message"],
        "title": "Choices"
      },
      "CompletionResponse": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "model": { "type": "string", "title": "Model" },
          "created": { "type": "integer", "title": "Created" },
          "citations": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Citations",
            "default": []
          },
          "choices": {
            "items": { "$ref": "#/components/schemas/Choices" },
            "type": "array",
            "title": "Choices"
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "chat.completion"
          }
        },
        "type": "object",
        "required": ["id", "model", "created", "choices"],
        "title": "CompletionResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "JSONSchema": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "description": { "type": "string", "title": "Description" },
          "schema": { "type": "object", "title": "Schema" },
          "strict": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Strict"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "JSONSchema"
      },
      "MessageChunk": {
        "properties": {
          "role": { "$ref": "#/components/schemas/Role" },
          "content": { "type": "string", "title": "Content" }
        },
        "type": "object",
        "required": ["role", "content"],
        "title": "MessageChunk"
      },
      "ResponseFormatJSONSchema": {
        "properties": {
          "json_schema": { "$ref": "#/components/schemas/JSONSchema" },
          "type": { "type": "string", "const": "json_schema", "title": "Type" }
        },
        "type": "object",
        "required": ["json_schema", "type"],
        "title": "ResponseFormatJSONSchema"
      },
      "ResponseFormatText": {
        "properties": {
          "type": { "type": "string", "const": "text", "title": "Type" }
        },
        "type": "object",
        "required": ["type"],
        "title": "ResponseFormatText"
      },
      "Role": {
        "type": "string",
        "enum": ["assistant", "user", "developer", "system"],
        "title": "Role"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  }
}
